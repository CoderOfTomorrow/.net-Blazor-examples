@using blazor_Examples.Components.Snake.Models

<div class="container" @onkeypress=KeyValue @onkeyup=KeyValue>
    <div class="board">
        <h5>@gameStatus</h5>
        @if (status)
        {
            foreach(var obj in snake)
            {
                <SnakeObject Status=status SnakeBody=obj/>
            }

            if (targetStatus)
            {
                <TargetObject Status=targetStatus Target=target />
            }
        }
    </div>

    <br />
    <button class="btn btn-info" @onclick=NewGame>Start</button>
    <button class="btn btn-info" @onclick=StopGame>Pause</button>
</div>



@code {
    private bool status;
    private bool targetStatus;
    private int lastX, lastY, xLast, yLast;
    private Directions vector = Directions.Right;
    private TargetBody target = new TargetBody();
    private List<SnakeBody> snake = new List<SnakeBody>
    {
        new SnakeBody{ Id=100}
    };
    Random random = new Random();
    private string gameStatus;

    private void NewGame()
    {
        if (!status)
        {
            status = true;
            targetStatus = true;
            gameStatus = "";
            _ = Task.Run(() => ChangeSnakePosition());
            _ = Task.Run(() => GenerateTarget());
        }
    }

    private void StopGame()
    {
        status = false;
        snake = new List<SnakeBody> { new SnakeBody { Id = 100 } };
    }

    private void KeyValue(KeyboardEventArgs args)
    {
        if (args.Code == "ArrowDown" && vector != Directions.Top)
            vector = Directions.Down;
        if (args.Code == "ArrowUp" && vector != Directions.Down)
            vector = Directions.Top;
        if (args.Code == "ArrowLeft" && vector != Directions.Right)
            vector = Directions.Left;
        if (args.Code == "ArrowRight" && vector != Directions.Left)
            vector = Directions.Right;
    }

    public async Task ChangeSnakePosition()
    {

        while (status)
        {
            await Task.Delay(200);
            foreach (var obj in snake) {
                if (obj.Id==100)
                {

                    switch (vector)
                    {
                        case Directions.Left: obj.xCoord -= 10; break;
                        case Directions.Right: obj.xCoord += 10; break;
                        case Directions.Down: obj.yCoord += 10; break;
                        case Directions.Top: obj.yCoord -= 10; break;
                        default: break;
                    }
                    CheckPosition();
                    xLast = obj.xCoord;
                    yLast = obj.yCoord;

                }
                else
                {
                    lastX = obj.xCoord;
                    lastY = obj.yCoord;
                    obj.xCoord = xLast;
                    obj.yCoord = yLast;
                    xLast = lastX;
                    yLast = lastY;

                }
            }

        }
    }

    public async Task GenerateTarget()
    {
        while (status)
        {
            target.XCoord = random.Next(29)*10;
            target.YCoord = random.Next(29)*10;

            while (targetStatus)
            {
                if (snake[0].xCoord == target.XCoord && snake[0].yCoord == target.YCoord)
                {
                    snake.Add(new SnakeBody());
                    targetStatus = false;
                    StateHasChanged();
                }
                await Task.Delay(200);
            }

            targetStatus = true;
        }
    }

    private void CheckPosition()
    {
        for(int i=1;i<snake.Count;i++)
        {
            if (snake[0].xCoord == snake[i].xCoord && snake[0].yCoord == snake[i].yCoord)
            {
                gameStatus = "You lost";
                StopGame();
            }
        }
    }
}

<style scoped>
    .board {
        position:relative;
        background-color: #87a72d;
        width: 300px;
        height: 300px;
        border-radius: 0%;
    }
</style>
